rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rule for the "surveys" collection
    match /surveys/{surveyId} {
      // Allow power users full read/write access
      allow read, write, update, create: if isPowerUserForTeam(getTeamId());
      
      //Allow read surveys of the team authenticated members of the team
      allow read: if canTeamExistsAndIsUserAuthenticated(resource.data.teamId) &&
      	isTeamMember(resource.data.teamId);
        
      // Allow authenitcated members (non-power) to update only the 'votes' attribute
      allow update: if canTeamExistsAndIsUserAuthenticated(resource.data.teamId) &&
      	isTeamMember(resource.data.teamId) &&
        request.resource.data.votes != null; //todo
    }

    // Helper function to check if the user is a power user for a given team
    function isPowerUserForTeam(teamId) {
      return teamId != null &&  // Ensure the survey has a valid teamId
        exists(/databases/$(database)/documents/teams/$(teamId)) &&  // Check if the team exists
        get(/databases/$(database)/documents/teams/$(teamId)).data.powerusers.hasAny([request.auth.uid]); // Check if the user's UID is in the powerusers array
    }
    
    function isTeamMember(teamId) {
    	return teamId != null &&  // Ensure the survey has a valid teamId
        exists(/databases/$(database)/documents/teams/$(teamId)) &&  // Check if the team exists
        get(/databases/$(database)/documents/teams/$(teamId)).data.members.hasAny([request.auth.uid]);
    }
    
    // Helper function to allow non-power authenitcated users to update specific fields
    function canTeamExistsAndIsUserAuthenticated(teamId) {
      return teamId != null && request.auth != null; // Ensure the request is authenticated and the team ID exists
    }
    
    
    // Secure access to the 'teams' collection - only team members can access
    match /teams/{teamId} {
      // Allow read/write only to team members
      allow read, write: if request.auth != null && 
        resource.data.members.hasAny([request.auth.uid]);
      
      // Allow creation if user is adding themselves as creator and member
      allow create: if request.auth != null && 
        request.resource.data.creator == request.auth.uid &&
        request.resource.data.members.hasAny([request.auth.uid]) &&
        request.resource.data.powerusers.hasAny([request.auth.uid]);
        
      // Allow users to add themselves to team when accepting invitation
      // Note: This is validated by the invitation system and batch writes
      allow update: if request.auth != null && 
        // Only allow adding the user to members array (keep existing members + add one)
        request.resource.data.members.hasAll(resource.data.members) && // Keep existing members
        request.resource.data.members.hasAny([request.auth.uid]) && // Add current user
        request.resource.data.members.size() == resource.data.members.size() + 1 && // Only add one member
        // Ensure other fields aren't modified
        request.resource.data.name == resource.data.name &&
        request.resource.data.creator == resource.data.creator &&
        request.resource.data.powerusers == resource.data.powerusers;
    }
    
    // Secure access to the 'users' collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow authenticated users to read user data for team management (e.g., looking up users by email)
      allow read: if request.auth != null;
    }
    
    // Team invitations - secure access for invitation system
    match /teamInvitations/{invitationId} {
      // Allow power users to create invitations for their teams
      allow create: if request.auth != null && 
        request.resource.data.teamId != null &&
        exists(/databases/$(database)/documents/teams/$(request.resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.powerusers.hasAny([request.auth.uid]);
        
      // Allow invited users to read their own invitations
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.inviteeId || 
         (resource.data.teamId != null &&
          exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
          get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.powerusers.hasAny([request.auth.uid])));
         
      // Allow invited users to update status (accept/decline)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.inviteeId &&
        request.resource.data.status in ['accepted', 'declined'] &&
        resource.data.status == 'pending';
        
      // Allow power users to delete (cancel) invitations
      allow delete: if request.auth != null && 
        resource.data.teamId != null &&
        exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.powerusers.hasAny([request.auth.uid]);
    }
    
    // Notifications - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
        
      // Allow system to create notifications
      allow create: if request.auth != null;
    }
    
    // Messages - team-based messaging system
    match /messages/{messageId} {
      // Allow team members to read messages from their team
      allow read: if request.auth != null && 
        resource.data.teamId != null &&
        exists(/databases/$(database)/documents/teams/$(resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.members.hasAny([request.auth.uid]);
        
      // Allow power users to create messages for their team
      allow create: if request.auth != null && 
        request.resource.data.teamId != null &&
        exists(/databases/$(database)/documents/teams/$(request.resource.data.teamId)) &&
        get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.powerusers.hasAny([request.auth.uid]) &&
        request.resource.data.authorId == request.auth.uid;
    }
    
    
    // pri create a update mel firebase problemy, takze u kazdeho requestu musim vzit neco jineho
    function getTeamId() {
  		return request.resource.data.teamId != null
    		? request.resource.data.teamId
    		: resource.data.teamId;
		}
      
  }
}