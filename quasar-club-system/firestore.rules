rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rule for the "surveys" collection
    match /surveys/{surveyId} {
      // Allow power users full read/write access
      allow read, write, update, create: if isPowerUserForTeam(getTeamId());
      
      //Allow read surveys of the team authenticated members of the team
      allow read: if canTeamExistsAndIsUserAuthenticated(resource.data.teamId) &&
      	isTeamMember(resource.data.teamId);
        
      // Allow authenitcated members (non-power) to update only the 'votes' attribute
      allow update: if canTeamExistsAndIsUserAuthenticated(resource.data.teamId) &&
      	isTeamMember(resource.data.teamId) &&
        request.resource.data.votes != null; //todo
    }

    // Helper function to check if the user is a power user for a given team
    function isPowerUserForTeam(teamId) {
      return teamId != null &&  // Ensure the survey has a valid teamId
        exists(/databases/$(database)/documents/teams/$(teamId)) &&  // Check if the team exists
        get(/databases/$(database)/documents/teams/$(teamId)).data.powerusers.hasAny([request.auth.uid]); // Check if the user's UID is in the powerusers array
    }
    
    function isTeamMember(teamId) {
    	return teamId != null &&  // Ensure the survey has a valid teamId
        exists(/databases/$(database)/documents/teams/$(teamId)) &&  // Check if the team exists
        get(/databases/$(database)/documents/teams/$(teamId)).data.members.hasAny([request.auth.uid]);
    }
    
    // Helper function to allow non-power authenitcated users to update specific fields
    function canTeamExistsAndIsUserAuthenticated(teamId) {
      return teamId != null && request.auth != null; // Ensure the request is authenticated and the team ID exists
    }
    
    // Allow unrestricted access to the 'teams' collection
    match /teams/{document=**} {
      allow read, write: if request.auth != null;    
    }
    
    // Allow unrestricted access to the 'survey' collection
    match /users/{document=**} {
      allow read, write: if request.auth != null;    
  	}
    
    // pri create a update mel firebase problemy, takze u kazdeho requestu musim vzit neco jineho
    function getTeamId() {
  		return request.resource.data.teamId != null
    		? request.resource.data.teamId
    		: resource.data.teamId;
		}
      
  }
}